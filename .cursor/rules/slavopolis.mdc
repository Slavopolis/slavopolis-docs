---
description: 
globs: 
alwaysApply: false
---
# 静态博客系统项目规则文档

## 项目概述

这是一个基于 React、TailwindCSS、MagicUI 等现代前端技术栈的静态博客系统，旨在提供高性能、美观、功能丰富的技术文档和博客展示平台。

### 核心特性
- 现代化 UI 设计，支持明暗主题切换
- 左右布局，左侧树形目录导航
- 支持 Markdown 和 MDX 渲染
- 内置全局搜索算法
- 丝滑交互体验和快速响应
- 约定式文件路径管理
- 高级内置组件集成
- 完善的配置管理系统

## 技术栈

### 核心框架
- **React 18+**: 主要前端框架
- **Next.js 14+**: 全栈 React 框架，支持 SSG
- **TypeScript**: 类型安全的开发语言

### 样式和 UI
- **TailwindCSS**: 原子化 CSS 框架
- **MagicUI**: 现代化 UI 组件库
- **Framer Motion**: 动画库
- **Radix UI**: 无样式 UI 组件库
- **Lucide React**: 图标库
- **Iconfont**: 自定义图标集成

### 内容处理
- **Next-MDX-Remote**: MDX 内容处理
- **Remark/Rehype**: Markdown 处理插件生态
- **Gray-matter**: Front matter 解析
- **Reading-time**: 阅读时间估算

### 代码高亮
- **Prism.js** 或 **Shiki**: 代码语法高亮
- **React-syntax-highlighter**: React 代码高亮组件

### 搜索功能
- **Flexsearch**: 轻量级全文搜索库
- **Fuse.js**: 模糊搜索算法

### 其他工具
- **Date-fns**: 日期处理
- **Zustand**: 状态管理
- **React-hot-toast**: 通知组件

## 项目结构

```
slavopolis-docs/
├── src/
│   ├── app/                    # Next.js App Router
│   │   ├── (auth)/            # 认证相关页面组
│   │   ├── (blog)/            # 博客相关页面组
│   │   ├── admin/             # 管理后台
│   │   ├── api/               # API 路由
│   │   ├── globals.css        # 全局样式
│   │   ├── layout.tsx         # 根布局
│   │   └── page.tsx           # 首页
│   ├── components/            # 组件目录
│   │   ├── ui/                # 基础 UI 组件
│   │   ├── layout/            # 布局组件
│   │   ├── blog/              # 博客专用组件
│   │   ├── search/            # 搜索组件
│   │   ├── advanced/          # 高级功能组件
│   │   └── common/            # 通用组件
│   ├── lib/                   # 工具函数和配置
│   │   ├── utils.ts           # 通用工具函数
│   │   ├── config.ts          # 配置管理
│   │   ├── search.ts          # 搜索算法
│   │   ├── markdown.ts        # Markdown 处理
│   │   └── theme.ts           # 主题管理
│   ├── hooks/                 # 自定义 Hooks
│   ├── stores/                # 状态管理
│   ├── types/                 # TypeScript 类型定义
│   └── styles/                # 样式文件
├── content/                   # 内容目录
│   ├── blog/                  # 博客文章
│   ├── docs/                  # 技术文档
│   └── pages/                 # 静态页面
├── config/                    # 配置文件目录
│   ├── site.config.ts         # 站点基本配置
│   ├── nav.config.ts          # 导航配置
│   ├── author.config.ts       # 作者信息配置
│   ├── footer.config.ts       # 页脚配置
│   ├── ai.config.ts           # AI 功能配置
│   ├── security.config.ts     # 加密配置
│   └── notification.config.ts # 通知配置
├── public/                    # 静态资源
│   ├── icons/                 # 图标资源
│   ├── images/                # 图片资源
│   └── favicon/               # 网站图标
└── docs/                      # 项目文档
```

## 核心功能模块

### 1. 布局系统

#### 主布局结构
- **双栏布局**: 左侧导航 + 右侧内容
- **响应式设计**: 移动端自适应
- **主题切换**: 明暗主题无缝切换
#### 左侧导航栏
- **树形目录结构**: 支持多级嵌套
- **文章列表**: 显示目录下所有文章
- **搜索框**: 全局内容搜索
- **分类筛选**: 按标签、分类筛选

#### 右侧内容区
- **文章渲染**: Markdown/MDX 内容展示
- **目录导航**: 文章大纲跳转
- **阅读进度**: 滚动进度指示
- **文章信息**: 作者、日期、标签等

### 2. 内容管理系统

#### 文件约定规则
```
content/
├── blog/
│   ├── 2024/
│   │   ├── 01-frontend/
│   │   │   ├── react-best-practices.md
│   │   │   └── vue-composition-api.mdx
│   │   └── 02-backend/
│   │       └── nodejs-performance.md
│   └── 2025/
│       └── 01-ai/
│           └── llm-applications.md
├── docs/
│   ├── frontend/
│   │   ├── react/
│   │   │   ├── index.md
│   │   │   ├── hooks.md
│   │   │   └── components.md
│   │   └── vue/
│   └── backend/
└── pages/
    ├── about.md
    └── contact.md
```

#### Front Matter 规范
```yaml
---
title: "文章标题"
description: "文章描述"
date: "2024-01-01"
tags: ["React", "前端"]
categories: ["前端开发"]
author: "作者名称"
draft: false
featured: true
cover: "/images/cover.jpg"
toc: true
encrypted: false
password: ""
---
```

### 3. 搜索系统

#### 搜索算法特性
- **全文搜索**: 支持标题、内容、标签搜索
- **模糊匹配**: 容错的搜索体验
- **实时搜索**: 输入即搜索
- **高亮显示**: 搜索结果关键词高亮
- **搜索历史**: 记录用户搜索记录

#### 搜索索引构建
- **构建时生成**: 静态生成搜索索引
- **增量更新**: 支持内容增量索引
- **性能优化**: 压缩索引文件大小

### 4. 高级组件系统

#### 内置组件列表
- **JSON 格式化器**: 美化显示 JSON 数据
- **差异对比器**: 代码/文本差异对比
- **API 测试器**: 快速 API 请求测试
- **AI 聊天**: 集成 AI 对话功能
- **站点卡片**: 自动解析网站信息
- **代码运行器**: 在线代码执行
- **图表组件**: 数据可视化展示
- **时间线**: 事件时间轴展示

#### 组件使用规范
```mdx
# 在 MDX 中使用组件

<JsonFormatter>
{
  "name": "example",
  "version": "1.0.0"
}
</JsonFormatter>

<DiffViewer
  oldCode="const a = 1;"
  newCode="const a = 2;"
  language="javascript"
/>

<ApiTester
  url="https://api.example.com/users"
  method="GET"
/>
```

### 5. 主题系统

#### 主题配置
- **CSS 变量**: 基于 CSS 自定义属性
- **动态切换**: 无刷新主题切换
- **本地存储**: 记住用户主题偏好
- **系统跟随**: 跟随系统主题设置

#### 颜色系统
```css
:root {
  --color-primary: #3b82f6;
  --color-secondary: #64748b;
  --color-accent: #f59e0b;
  --color-background: #ffffff;
  --color-foreground: #0f172a;
  --color-muted: #f8fafc;
  --color-border: #e2e8f0;
}

[data-theme="dark"] {
  --color-background: #0f172a;
  --color-foreground: #f8fafc;
  --color-muted: #1e293b;
  --color-border: #334155;
}
```

### 6. 配置管理系统

#### 站点基本配置 (site.config.ts)
```typescript
export const siteConfig = {
  name: "博客名称",
  title: "站点标题",
  description: "站点描述",
  url: "https://example.com",
  logo: "/logo.png",
  favicon: "/favicon.ico",
  language: "zh-CN",
  timezone: "Asia/Shanghai",
  analytics: {
    googleAnalytics: "GA_TRACKING_ID",
    baiduAnalytics: "BAIDU_TRACKING_ID"
  },
  seo: {
    keywords: ["博客", "技术", "前端"],
    ogImage: "/og-image.png",
    twitterHandle: "@username"
  }
}
```

#### 导航配置 (nav.config.ts)
```typescript
export const navConfig = {
  main: [
    { title: "首页", href: "/" },
    { title: "博客", href: "/blog" },
    { title: "文档", href: "/docs" },
    { title: "关于", href: "/about" }
  ],
  sidebar: {
    "/docs": [
      {
        title: "快速开始",
        items: [
          { title: "安装", href: "/docs/installation" },
          { title: "配置", href: "/docs/configuration" }
        ]
      }
    ]
  }
}
```

#### 作者信息配置 (author.config.ts)
```typescript
export const authorConfig = {
  name: "作者姓名",
  avatar: "/avatar.jpg",
  bio: "作者简介",
  location: "所在地",
  website: "https://author-website.com",
  social: {
    github: "https://github.com/username",
    twitter: "https://twitter.com/username",
    email: "author@example.com"
  }
}
```

#### AI 功能配置 (ai.config.ts)
```typescript
export const aiConfig = {
  enabled: true,
  provider: "openai", // openai, anthropic, local
  models: {
    chat: "gpt-4",
    embedding: "text-embedding-ada-002"
  },
  features: {
    chatBot: true,
    contentSummary: true,
    translation: true,
    codeGeneration: true
  },
  rateLimit: {
    requests: 100,
    window: "1h"
  }
}
```

#### 安全配置 (security.config.ts)
```typescript
export const securityConfig = {
  encryption: {
    algorithm: "AES-256-GCM",
    keyDerivation: "PBKDF2"
  },
  content: {
    enableEncryption: true,
    globalPassword: process.env.GLOBAL_PASSWORD,
    saltRounds: 12
  },
  pages: {
    protectedRoutes: ["/admin", "/private"],
    authRequired: true
  }
}
```

## 开发规范

### 1. 代码规范

#### TypeScript 规范
- 严格类型检查
- 禁用 `any` 类型
- 导出类型定义
- 使用 interface 而非 type（除非必要）

#### React 组件规范
```typescript
// 组件文件结构
interface ComponentProps {
  title: string;
  children?: React.ReactNode;
  className?: string;
}

export function Component({ title, children, className }: ComponentProps) {
  return (
    <div className={cn("base-classes", className)}>
      <h1>{title}</h1>
      {children}
    </div>
  );
}

Component.displayName = "Component";
```

#### 样式规范
- 使用 Tailwind 原子化类名
- 避免内联样式
- 使用 `cn()` 函数合并类名
- 响应式设计优先

### 2. 文件命名规范

#### 组件文件
- React 组件使用 PascalCase
- 文件名与组件名一致
- 使用 `index.ts` 导出

#### 工具函数
- 使用 camelCase
- 功能相关函数归类
- 添加 JSDoc 注释

#### 配置文件
- 使用 kebab-case
- 以 `.config.ts` 结尾
- 导出具名配置对象

### 3. Git 提交规范

```
feat: 新功能
fix: 修复问题
docs: 文档更新
style: 代码格式调整
refactor: 代码重构
test: 测试相关
chore: 构建/工具链更新
```

## 性能优化

### 1. 构建优化
- **代码分割**: 路由级别的懒加载
- **图片优化**: Next.js Image 组件
- **字体优化**: 字体子集化和预加载
- **CSS 优化**: 未使用样式清理

### 2. 运行时优化
- **虚拟滚动**: 长列表性能优化
- **搜索节流**: 防抖搜索输入
- **内容缓存**: 浏览器缓存策略
- **预加载**: 关键资源预加载

### 3. SEO 优化
- **元数据**: 动态生成页面元数据
- **结构化数据**: JSON-LD 标记
- **站点地图**: 自动生成 sitemap
- **robots.txt**: 搜索引擎爬虫配置

## 部署策略

### 1. 静态部署
- **Vercel**: 推荐部署平台
- **Netlify**: 备选部署平台
- **GitHub Pages**: 开源项目部署

### 2. 环境配置
```bash
# 生产环境
NODE_ENV=production
NEXT_PUBLIC_SITE_URL=https://yourdomain.com
OPENAI_API_KEY=your-api-key

# 开发环境
NODE_ENV=development
NEXT_PUBLIC_SITE_URL=http://localhost:3000
```

### 3. CI/CD 流程
- **代码检查**: ESLint + Prettier
- **类型检查**: TypeScript 编译
- **测试**: Jest + Testing Library
- **构建**: Next.js 静态生成
- **部署**: 自动化部署

## 扩展指南

### 1. 添加新组件
1. 在 `components/ui/` 创建组件文件
2. 添加 TypeScript 类型定义
3. 编写组件文档和示例
4. 在 `components/index.ts` 中导出

### 2. 添加新页面
1. 在 `app/` 下创建路由文件
2. 配置页面元数据
3. 添加导航链接（如需要）
4. 更新站点地图

### 3. 自定义主题
1. 修改 CSS 变量定义
2. 更新 Tailwind 配置
3. 添加主题切换逻辑
4. 测试所有组件兼容性

### 4. 集成第三方服务
1. 添加配置项到相应 config 文件
2. 创建服务集成模块
3. 添加环境变量
4. 更新文档说明

## 安全考虑

### 1. 内容加密
- 支持文章级别加密
- 页面级别访问控制
- 密码强度验证
- 安全的密钥存储

### 2. 用户输入验证
- XSS 防护
- CSRF 保护
- 输入sanitization
- 文件上传安全

### 3. API 安全
- 请求频率限制
- API 密钥管理
- CORS 配置
- 错误信息安全

## 测试策略

### 1. 单元测试
- 组件功能测试
- 工具函数测试
- Hooks 测试
- 配置验证测试

### 2. 集成测试
- 页面渲染测试
- 路由导航测试
- 搜索功能测试
- 主题切换测试

### 3. E2E 测试
- 用户关键流程
- 跨浏览器兼容性
- 移动端适配
- 性能基准测试

## 维护指南

### 1. 依赖管理
- 定期更新依赖包
- 安全漏洞检查
- 版本兼容性测试
- 变更日志记录

### 2. 内容维护
- 定期内容审查
- 死链检查
- 图片优化
- 搜索索引更新

### 3. 性能监控
- 页面加载速度
- 核心网络指标
- 错误日志监控
- 用户行为分析

---

## 注意事项

1. **代码质量**: 始终遵循 TypeScript 严格模式，确保类型安全
2. **用户体验**: 优先考虑加载速度和交互响应性
3. **可访问性**: 遵循 WCAG 指南，支持屏幕阅读器
4. **浏览器兼容**: 支持现代浏览器，优雅降级
5. **文档维护**: 及时更新项目文档和组件文档
6. **安全意识**: 定期进行安全审查和漏洞扫描

此文档将作为项目开发的重要参考，所有新功能开发和代码修改都应遵循本文档的规范和指导原则。
